pipeline {
  agent any
  // agent {
  //   //label 'master'
  //   //docker { image 'node:latest' }
  //   //dockerfile true
  // }
  environment {
    registryCredential = 'harbor.tris.vn'
	DOCKER_REGISTRY = 'harbor.tris.vn'
	
    CONTAINER_NAME = 'test-jenkins-node-service'
    ACTION_TYPE = sh(script: "echo \"${env.gitlabActionType}\" | sed 's|/|-|g'", returnStdout: true).trim().toLowerCase()
    PARSED_VERSION = sh(returnStdout: true, script: "git log -1 | sed -r 's/[[:alnum:]]+=/\\n&/g' | awk -F= '{if(\$1==\"VERSION\"){print \$2} else {print \"\"}}' | sed ':a;N;\$!ba;s/\\n//g' | awk '{if(\$1==\"\"){print \"latest\"} else {print \$1}}'").trim()
    APP_VERSION = sh(script: "echo \"$PARSED_VERSION\"", returnStdout: true)
	
	MAT_KHAU1 = credentials('MAT_KHAU')
  }

  stages {
    stage('Info') {
      steps {
        echo "Current build number: ${currentBuild.number}"
        withCredentials([string(credentialsId: 'MAT_KHAU', variable: 'MAT_KHAU')]) {
			sh 'echo "MAT_KHAU: ${MAT_KHAU}"'
		}
		script {
            def commit = sh(returnStdout: true, script: 'git log -1 --pretty=%B | cat')
            echo "Last commit : ${commit}"
            echo "APP_VERSION : ${APP_VERSION}"
            echo "BUILD_NUMBER : ${BUILD_NUMBER}"
        }
      }
    }

    stage('NextOne'){
      parallel{
          stage('MapService') {
            when{ 
              anyOf{
                changeset "cicd/jenkins/Jenkinsfile"
                changeset 'src/MapService/**'
                expression { service == 'map'}
              }
              
            }
            steps {
              sh "APP_VERSION=${BUILD_NUMBER} docker-compose build map"
              
              sh 'docker tag ${DOCKER_REGISTRY}/nextone/map ${DOCKER_REGISTRY}/nextone/map:${BUILD_NUMBER}'
              withCredentials([usernamePassword( credentialsId: "${registryCredential}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'docker login -u ${USERNAME} -p ${PASSWORD} ${registryCredential}'
                sh 'docker push ${DOCKER_REGISTRY}/nextone/map:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_REGISTRY}/nextone/map:latest'
              }
            }
			
          }

          stage('MapWeb') {
            when{ 
              anyOf {
                changeset "cicd/jenkins/Jenkinsfile"
                changeset "src/web-map/**"
                expression { service == 'map-web'}
              }
            }
            steps {
              sh "APP_VERSION=${BUILD_NUMBER} docker-compose build map-web"
              
              sh 'docker tag ${DOCKER_REGISTRY}/nextone/map-web ${DOCKER_REGISTRY}/nextone/map-web:${BUILD_NUMBER}'
              withCredentials([usernamePassword( credentialsId: "${registryCredential}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'docker login -u ${USERNAME} -p ${PASSWORD} ${registryCredential}'
                sh 'docker push ${DOCKER_REGISTRY}/nextone/map-web:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_REGISTRY}/nextone/map-web:latest'
              }
            }
			
            
			
          }

          stage('IdentityService') {
            when{ 
              anyOf {
                changeset "cicd/jenkins/Jenkinsfile"
                changeset "src/Identity/**"
                changeset "src/SharedDomain/**"
                changeset "src/Libs/NextOne.Shared/**"
                changeset "src/Libs/NextOne.Infrastructure.Core/**"
                expression { service == 'identity'}
              }
            }
			
			      steps {
              sh "APP_VERSION=${BUILD_NUMBER} docker-compose build identity"
              
              sh 'docker tag ${DOCKER_REGISTRY}/nextone/identity ${DOCKER_REGISTRY}/nextone/identity:${BUILD_NUMBER}'
              withCredentials([usernamePassword( credentialsId: "${registryCredential}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh 'docker login -u ${USERNAME} -p ${PASSWORD} ${registryCredential}'
                sh 'docker push ${DOCKER_REGISTRY}/nextone/identity:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_REGISTRY}/nextone/identity:latest'
              }
            }
			
          }
      }
    }

    stage('Clean'){
      steps{
        sh "APP_VERSION=${BUILD_NUMBER} docker-compose down --rmi 'all' || true"
      }
    }

    stage('MapService-DeployStaging') {
        when {
          expression { GIT_BRANCH == 'origin/main' }
        }
        steps {
          sh "docker-compose -f docker-compose.yml up --no-deps -d map"
        }
    }

    stage('MapWeb-DeployStaging') {
      when {
        expression { GIT_BRANCH == 'origin/main' }
      }
      steps {
          withCredentials([usernamePassword( credentialsId: "${registryCredential}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
              sh 'docker login -u ${USERNAME} -p ${PASSWORD} ${registryCredential}'
              sh "docker-compose -f docker-compose.yml up -d map-web"
          }
      }
    }

    stage('IdentityService-DeployStaging') {
        when {
          expression { GIT_BRANCH == 'origin/main' }
        }
        steps {
          sh "docker-compose -f docker-compose.yml up --no-deps -d identity"
        }
    }
    
  }

  post {
    success {
      script {
        sh 'echo Pipeline successfully run'
      }
    }
    always {
      sh 'echo Done'
    }
  }
}
