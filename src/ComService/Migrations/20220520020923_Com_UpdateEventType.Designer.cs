// <auto-generated />
using System;
using ComService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComService.Migrations
{
    [DbContext(typeof(ComDbContext))]
    [Migration("20220520020923_Com_UpdateEvetType")]
    partial class Com_UpdateEventType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ComService.Domain.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("T_App_Conversation", "com");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("ComService.Domain.ConversationMember", b =>
                {
                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("T_App_ConversationMember", "com");
                });

            modelBuilder.Entity("ComService.Domain.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<DateTime>("OccurDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserSenderId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("T_App_Event", "com");
                });

            modelBuilder.Entity("ComService.Domain.EventFile", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FileId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FileType")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventId", "FileId");

                    b.ToTable("T_App_EventFiles", "com");
                });

            modelBuilder.Entity("ComService.Domain.EventType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Code");

                    b.ToTable("T_App_EventType", "com");
                });

            modelBuilder.Entity("ComService.Domain.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("EventId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserSenderId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.HasIndex("UserSenderId");

                    b.ToTable("T_App_Message", "com");
                });

            modelBuilder.Entity("ComService.Domain.MessageFile", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FileId")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MessageId", "FileId");

                    b.ToTable("T_App_MessageFiles", "com");
                });

            modelBuilder.Entity("ComService.Domain.UserStatus", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<double?>("LastLat")
                        .HasColumnType("float");

                    b.Property<double?>("LastLon")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserAvatarUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("T_App_UserStatus", "com");
                });

            modelBuilder.Entity("ComService.Domain.UserTrackingLocation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.HasKey("UserId", "Date");

                    b.ToTable("T_App_UserTrackingLocations", "com");
                });

            modelBuilder.Entity("ComService.Domain.Channel", b =>
                {
                    b.HasBaseType("ComService.Domain.Conversation");

                    b.Property<string>("AllowedEventTypeCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ComService.Domain.GroupConversation", b =>
                {
                    b.HasBaseType("ComService.Domain.Conversation");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ComService.Domain.P2PConversation", b =>
                {
                    b.HasBaseType("ComService.Domain.Conversation");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ComService.Domain.PrivateConversation", b =>
                {
                    b.HasBaseType("ComService.Domain.Conversation");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ComService.Domain.ConversationMember", b =>
                {
                    b.HasOne("ComService.Domain.Conversation", null)
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComService.Domain.UserStatus", "UserMember")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("ComService.Domain.Event", b =>
                {
                    b.HasOne("ComService.Domain.Channel", null)
                        .WithMany("RecentEvents")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComService.Domain.UserStatus", "UserSender")
                        .WithMany()
                        .HasForeignKey("UserSenderId");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("ComService.Domain.EventFile", b =>
                {
                    b.HasOne("ComService.Domain.Event", null)
                        .WithMany("Files")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComService.Domain.Message", b =>
                {
                    b.HasOne("ComService.Domain.Conversation", null)
                        .WithMany("RecentMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComService.Domain.Event", "Event")
                        .WithOne()
                        .HasForeignKey("ComService.Domain.Message", "EventId");

                    b.HasOne("ComService.Domain.UserStatus", "UserSender")
                        .WithMany()
                        .HasForeignKey("UserSenderId");

                    b.Navigation("Event");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("ComService.Domain.MessageFile", b =>
                {
                    b.HasOne("ComService.Domain.Message", null)
                        .WithMany("Files")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComService.Domain.UserTrackingLocation", b =>
                {
                    b.HasOne("ComService.Domain.UserStatus", null)
                        .WithMany("RecentTrackingLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComService.Domain.Conversation", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("RecentMessages");
                });

            modelBuilder.Entity("ComService.Domain.Event", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ComService.Domain.Message", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ComService.Domain.UserStatus", b =>
                {
                    b.Navigation("RecentTrackingLocations");
                });

            modelBuilder.Entity("ComService.Domain.Channel", b =>
                {
                    b.Navigation("RecentEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
